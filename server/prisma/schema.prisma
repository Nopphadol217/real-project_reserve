// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  googleId   String?    @unique
  facebookId String?    @unique
  username   String     @unique
  firstname  String?
  lastname   String?
  email      String     @unique
  password   String
  picture    String?
  role       Role       @default(USER)
  enabled    Boolean    @default(true) // เพิ่มฟิลด์สำหรับเปิด/ปิดบัญชี
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  places     Place[]
  bookings   Booking[]
  favorites  Favorite[]
  payments   Payment[] // ข้อมูลการชำระเงินของ user
}

model Place {
  id          Int        @id @default(autoincrement())
  title       String
  description String     @db.VarChar(1000)
  price       Int
  category    String
  lat         Float
  lng         Float
  public_id   String
  secure_url  String
  rooms       Int        @default(1) // จำนวนห้อง
  amenities   String?    @db.Text // JSON string เก็บ amenities
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  User        User?      @relation(fields: [userId], references: [id])
  userId      Int
  galleries   Gallery[]
  roomDetails Room[]     @relation("PlaceRoomDetails")
  bookings    Booking[]
  favorites   Favorite[]
  payments    Payment[] // ข้อมูลการชำระเงินของ place
}

model Gallery {
  id         Int      @id @default(autoincrement())
  public_id  String // Cloudinary public id
  secure_url String // Cloudinary secure_url
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Place      Place    @relation(fields: [placeId], references: [id])
  placeId    Int // foreign key to Place
}

model Room {
  id        Int       @id @default(autoincrement())
  name      String
  price     Int
  status    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Place     Place?    @relation("PlaceRoomDetails", fields: [placeId], references: [id])
  placeId   Int
  bookings  Booking[]
}

model Booking {
  id            Int      @id @default(autoincrement())
  placeId       Int
  roomId        Int
  userId        Int
  checkIn       DateTime
  checkOut      DateTime
  totalPrice    Int
  status        String   @default("pending") // pending, confirmed, cancelled
  paymentStatus String   @default("unpaid") // unpaid, paid, refunded
  paymentSlip   String? // URL ของสลิปการโอนเงิน
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  User          User     @relation(fields: [userId], references: [id])
  Place         Place    @relation(fields: [placeId], references: [id])
  Room          Room     @relation(fields: [roomId], references: [id])
}

model Payment {
  id             Int      @id @default(autoincrement())
  userId         Int
  placeId        Int? // Optional, can be null for user-level payment info
  accountName    String // ชื่อบัญชี
  bankName       String // ชื่อธนาคาร
  accountNumber  String // เลขบัญชี
  qrCodeUrl      String? // URL ของ QR Code PromptPay
  qrCodePublicId String? // Cloudinary public_id ของ QR Code
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  User           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Place          Place?   @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@unique([userId, placeId]) // ป้องกันการเพิ่มข้อมูลการชำระเงินซ้ำ
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  placeId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Place     Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@unique([userId, placeId]) // ป้องกันการเพิ่มรายการโปรดซ้ำ
}

enum Role {
  USER
  ADMIN
  BUSINESS // ผู้ประกอบการ
}
